uv init django_blog
cd django_blog
powershell -ExecutionPolicy ByPass -c "irm https://astral.sh/uv/install.ps1 | iex"
uv add django
uv run django-admin startproject django_blog .
uv run django-admin version
uv run manage.py runserver
uv run manage.py migrate
django-admin startapp article

python manage.py makemigrations
python manage.py migrate
python manage.py sqlmigrate article 0001

python manage.py migrate article 0001 - отменит миграции после 0001 (откат)
python manage.py migrate article zero - откат

uv run manage.py shell

pip install python-dotenv
pip install dotenv
uv add python-dotenv

uv run manage.py createsuperuser
django.contrib.auth

uv run manage.py test

uv run manage.py dumpdata 

runserver - запуск сервера ращработки
migrate - применение миграций
makemigrations - создание миграций 
shell - работа с базой через интерактивную оболочку
createsuperuser - создание суперпользователя для админки
test - запуск тестов
startapp - генерация приложений
sqlmigrate - вывод миграций в формате SQL


{% if user.is_authenticated %}
    <p>Привет, {{ user.username }}!</p>
{% else %}
    <p>Пожалуйста, <a href="{% url 'login' %}">войдите</a> или <a href="{% url 'register' %}">зарегистрируйтесь</a>.</p>
{% endif %}

<ul>
    {% for article in articles %}
        <li><a href="{% url 'article_detail' article.id %}">{{ article.title }}</a></li>
    {% endfor %}
</ul>

django.template.context_processors.request - добавляет переменную request в контекст шаблона
django.template.context_processors.debug - добавляет переменную DEBUG в контекст шаблона

def login_view(request):
    if request.method == 'GET':
        return render(request, 'login.html')
    elif request.method == 'POST':
        username = request.POST['username']
        password = request.POST['password']
        # Проверка логина и пароля
        return HTTPResponse('Логин и пароль введены верно')

from django.views.decorators.http import require_http_methods

@require_http_methods(['GET', 'POST'])
def login_view(request):
    ...

from django.http import HttpResponse
from django.views import View

class IndexView(View):
    def get(self, request, *args, **kwargs):
        return HttpResponse('Hello, world!')

конвертеры для динамических URL
int - целое число
str - строка без слешей
slug - строка из латинских букв и цифр и дефисов и подчеркиваний
uuid - уникальный идентификатор формата uuid
path - строка может содержать слеши

Сделайте так, чтобы django_blog.article.views.index принимала строковый параметр "tags" 
и целочисленный параметр "article_id" из пути /articles/tags/article_id и выводила текст в виде Статья номер 42. Тег python
Назначьте django_blog.article.views.index имя "article"
Сделайте так, чтобы открытие "домашней страницы" делало перенаправление на /articles/python/42. 
Для этого используйте django.shortcuts.redirect и django.urls.reverse. Не задавайте URL напрямую, 
используйте обратный маршрут

таблица users с id, name, email
SELECT * FROM users
SELECT id, name, email FROM users

User.objects.all()

django.db.models.Model

PS C:\Users\Ефимов\pythonProjects\top-python\online\django_blog> python manage.py migrate
Operations to perform:
  Apply all migrations: admin, article, auth, contenttypes, sessions
Running migrations:
  Applying contenttypes.0001_initial... OK
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying admin.0003_logentry_add_action_flag_choices... OK
  Applying article.0001_initial... OK
  Applying contenttypes.0002_remove_content_type_name... OK
  Applying auth.0002_alter_permission_name_max_length... OK
  Applying auth.0003_alter_user_email_max_length... OK
  Applying auth.0005_alter_user_last_login_null... OK
  Applying auth.0006_require_contenttypes_0002... OK
  Applying auth.0007_alter_validators_add_error_messages... OK
  Applying auth.0008_alter_user_username_max_length... OK
  Applying auth.0009_alter_user_last_name_max_length... OK
  Applying auth.0010_alter_group_name_max_length... OK
  Applying auth.0011_update_proxy_permissions... OK
  Applying auth.0012_alter_user_first_name_max_length... OK
  Applying sessions.0001_initial... OK
PS C:\Users\Ефимов\pythonProjects\top-python\online\django_blog> python manage.py sqlmigrate article 0001
BEGIN;
--
-- Create model Article
--
CREATE TABLE "article_article" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "name" varchar(200) NOT NULL, "body" text NOT NULL, "created_at" datetime NOT NULL, "updated_at" datetime NOT NULL);
COMMIT;
PS C:\Users\Ефимов\pythonProjects\top-python\online\django_blog> uv run manage.py shell
7 objects imported automatically (use -v 2 for details).

Python 3.13.3 (main, Apr  9 2025, 04:04:49) [MSC v.1943 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> from django_blog.article.models import (
... Article,
... )
>>> a = Article()
>>> a.name = 'first article'
>>> a.body = 'first body article'
>>> a
<Article: Article object (None)>
>>> a.id
>>> a.name
'first article'
>>> a.body
'first body article'
>>> a.save()
>>> a = Article.objects.create(name="second article", body="second body article")
>>> a
<Article: Article object (2)>
>>> a.id
2
>>> a.name
'second article'
>>> a.body
'second body article'
>>> a.created_at
datetime.datetime(2025, 8, 23, 9, 19, 41, 228658, tzinfo=datetime.timezone.utc)
>>> a.updated_at
datetime.datetime(2025, 8, 23, 9, 19, 41, 228787, tzinfo=datetime.timezone.utc)
>>> a.name = 'second article updated'
>>> a.name
'second article updated'
>>> a.save()
>>> a.id
2
>>> a = Article.object.get(id=1)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: type object 'Article' has no attribute 'object'. Did you mean: 'objects'?
>>> a = Article.objects.get(id=1)
>>> a.id
1
>>> a.name
'first article'
>>> a = Article.objects.get(id=3) 
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "C:\Users\Ефимов\pythonProjects\top-python\online\django_blog\.venv\Lib\site-packages\django\db\models\manager.py", line 87, in manager_method  
    return getattr(self.get_queryset(), name)(*args, **kwargs)
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^
  File "C:\Users\Ефимов\pythonProjects\top-python\online\django_blog\.venv\Lib\site-packages\django\db\models\query.py", line 633, in get
    raise self.model.DoesNotExist(
        "%s matching query does not exist." % self.model._meta.object_name
    )
django_blog.article.models.Article.DoesNotExist: Article matching query does not exist.
>>> a = Article.objects.filter(name="first article")
>>> a.id
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'QuerySet' object has no attribute 'id'
>>> a
<QuerySet [<Article: Article object (1)>]>
>>> Article.objects.filter(id__gt=1).first().body
'second body article'
>>> a = Article.objects.all()
>>> a
<QuerySet [<Article: Article object (1)>, <Article: Article object (2)>]>
>>> a = Article.objects.get(id=2)
>>> a.delete()
(1, {'article.Article': 1})
>>> Article.objects.all()
<QuerySet [<Article: Article object (1)>]>
>>>

DATABASE_URL=postgres://user:password@127.0.0.1:5432/mydb
import dj-database-url
Ansible, Kubernetes, Docker, Terraform 
- это инструменты для автоматизации и управления инфраструктурой. 
Они позволяют создавать и управлять инфраструктурой в облаке, на локальной машине или в виртуальных окружениях. 
Ansible - это инструмент для автоматизации и управления конфигурацией, 
Kubernetes - это система управления контейнерами, 
Docker - это инструмент для создания и управления контейнерами, 
Terraform - это инструмент для автоматизации и создания инфраструктуры. 

Vault - это инструмент для управления секретами
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

db_from_env = dj_database_url.config(conn_max_age=600)
DATABASES['default'].update(db_from_env)


# Byte-compiled / optimized / DLL files
__pycache__/
*.py[codz]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py.cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# UV
#   Similar to Pipfile.lock, it is generally recommended to include uv.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#uv.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock
#poetry.toml

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#   pdm recommends including project-wide configuration in pdm.toml, but excluding .pdm-python.
#   https://pdm-project.org/en/latest/usage/project/#working-with-version-control
#pdm.lock
#pdm.toml
.pdm-python
.pdm-build/

# pixi
#   Similar to Pipfile.lock, it is generally recommended to include pixi.lock in version control.
#pixi.lock
#   Pixi creates a virtual environment in the .pixi directory, just like venv module creates one
#   in the .venv directory. It is recommended not to include this directory in version control.
.pixi

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.envrc
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

# Abstra
# Abstra is an AI-powered process automation framework.
# Ignore directories containing user credentials, local state, and settings.
# Learn more at https://abstra.io/docs
.abstra/

# Visual Studio Code
#  Visual Studio Code specific template is maintained in a separate VisualStudioCode.gitignore 
#  that can be found at https://github.com/github/gitignore/blob/main/Global/VisualStudioCode.gitignore
#  and can be added to the global gitignore or merged into this file. However, if you prefer, 
#  you could uncomment the following to ignore the entire vscode folder
# .vscode/

# Ruff stuff:
.ruff_cache/

# PyPI configuration file
.pypirc

# Cursor
#  Cursor is an AI-powered code editor. `.cursorignore` specifies files/directories to
#  exclude from AI features like autocomplete and code analysis. Recommended for sensitive data
#  refer to https://docs.cursor.com/context/ignore-files
.cursorignore
.cursorindexingignore

# Marimo
marimo/_static/
marimo/_lsp/
__marimo__/


создать модель
применить миграции
создать пользователя
создать шаблон
изменить views
изменить тест и проверить наличие пользователя

CRUD 


добавить комментарии:
в модель
миграции
во views (с article__id=kwargs['article_id'])
в urls

Сделайте имя статьи в списке статей ссылкой на конкретную статью

формы
генерация html разметки
<label>
<input>
<textarea>
<select>

валидация данных 
EmailField
CharField 200 символов

безопасность
CSRF


сделать возможность оставлять комментарии не только от admin

убрать *text в начале, отобразить ошибку иначе