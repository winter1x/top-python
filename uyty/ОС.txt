Оценивается при наличии пул реквеста

Требования к оформлению теоретических вопросов:
Максимальные баллы за теорию при соответствии общим оформлениям отчета по 7.32-2017 (размер, шрифт, отступ, интервал, по ширине, выделения, оглавление) 
Результат предоставить в ворде

Вопросы теории
9. Понятие процесса. Состояния процесса.
10. Планирование процессов в системах пакетной обработки.
11. Планирование процессов в интерактивных системах.
12. Планирование процессов в системах реального времени.
13. Операции над процессами.
14. Приоритеты процессов.
15. Понятие потока. Ресурсы и потоки в операционной системе
16. Понятие ресурса. Классификация ресурсов.
17. Дисциплины распределения ресурсов на основе очередей.
17. Основные элементы графических интерфейсов.
18. Интерфейс прикладного программирования (API).

Требования к оформлению практики:
Соответствие принципам чистого кода

Критерии оценивания: 
теория - 30
1 - 10
2 - 10
3 - 10
4 - 10
5 - 10
6 - 10
7 - 10
0-39 - 2
40-59 - 3
60-79 - 4
80-100 - 5

1
Реализовать простую клиент-серверную программу на TCP с использованием только модуля socket. Обмен сообщениями между одним клиентом и сервером. В дальнейшем можно расширить.

Условия:
Сервер запускается и ждёт подключения от одного клиента.
После подключения происходит обмен сообщениями: клиент и сервер по очереди отправляют и получают строки.
Работа завершается при вводе exit любой из сторон.
Использовать только модуль socket.
Ввод данных через input().

Файлы:
tcp_server.py
tcp_client.py

Примерный алгоритм (у вас может быть по другому)
Сервер (tcp_server.py)
Создаёт TCP-сокет.
Привязывается к 127.0.0.1, порту (например, 5000).
Слушает и принимает подключение.
Получает сообщение от клиента → выводит → отправляет ответ.
Повторяет до получения exit.

Клиент (tcp_client.py)
Создаёт TCP-сокет.
Подключается к 127.0.0.1, порту 5000.
В цикле:
Отправляет строку, считанную с клавиатуры.
Получает ответ от сервера.
Завершает при вводе exit.

Оценивается при наличии скриншота работы

2
Реализовать простой UDP клиент и сервер, которые обмениваются сообщениями через socket.
Условия:
Клиент отправляет строку на сервер.
Сервер возвращает ту же строку обратно (эхо).
Завершение по команде exit от клиента.
Используется только socket.

Файлы:
udp_echo_server.py
udp_echo_client.py

Примерный алгоритм (у вас может быть по другому)
UDP Сервер (udp_echo_server.py)
Создаёт UDP-сокет.
Привязывается к 127.0.0.1, порту (например, 6000).
В бесконечном цикле:
Получает сообщение от клиента (recvfrom).
Если это exit, завершает.
Отправляет это сообщение обратно отправителю.

UDP Клиент (udp_echo_client.py)
Создаёт UDP-сокет.
В цикле:
Вводит строку.
Отправляет серверу.
Получает ответ.
Завершает при exit.

Оценивается при наличии скриншота работы

3
3.1 GET-запрос на Google
https://www.google.com.
Отобразить:
Статус-код ответа
Заголовки ответа
Первые 500 символов HTML-контента (без парсинга)
Файл: google_get.py

Оценивается при наличии скриншота работы и google_get.txt с данными (выводом) консоли

3.2 
Задание 2: POST-запрос на httpbin
https://httpbin.org/post.
Отправить словарь с произвольными данными, например:
{"username": "student", "exam": "http_test"}
Отобразить:
Статус-код ответа
Ответ в формате JSON
Подтверждение, что данные были получены сервером
Файл: post_to_httpbin.py

Оценивается при наличии скриншота работы и post_to_httpbin.txt с данными (выводом) консоли

4
Реализовать программу, которая:
Получает список репозиториев публичного пользователя GitHub.
Загружает все репозитории с постраничным выводом (по 5 за раз).

Отображает краткую информацию о каждом репозитории:
Название
Язык программирования
Кол-во звёзд (stars)
Кол-во форков (forks)

В конце — выводит общую статистику:
Общее количество репозиториев
Язык, который встречается чаще всего
Суммарное количество звёзд

Входные данные:
Пользователь вводит имя пользователя GitHub через input()
github_repo_analyzer.py

Оценивается при наличии скриншота работы и использования своего токена  и github_repo_analyzer.txt с данными (выводом) консоли

5
Отправить GraphQL-запрос к https://countries.trevorblades.com/.

Получить список всех стран с информацией:
название (name),
код (code),
столица (capital),
валюта (currency),
язык(и) (languages).

Отобразить первые 10 стран построчно.

Посчитать и вывести:
общее количество стран,
количество уникальных валют,
топ-3 самых часто встречающихся языков.

graphql_countries.py

Оценивается при наличии скриншота работы и graphql_countries.txt с данными (выводом) консоли

6
Отправить GET-запрос на URL:
https://www.cbr.ru/scripts/XML_daily.asp
Получить XML-ответ с курсами валют на текущую дату.
С помощью BeautifulSoup распарсить XML.

Для каждой валюты вывести:
Код валюты (атрибут ID у тега <Valute>)
Цифровой код валюты (NumCode)
Буквенный код валюты (CharCode)
Название валюты (Name)
Номинал (Nominal)
Курс к рублю (Value)

Найти курс доллара (CharCode = USD) и вывести отдельно.
отсортировать валюты по курсу (Value) по убыванию.

cbr_currency_parser.py

Оценивается при наличии скриншота работы и cbr_currency_parser.txt с данными (выводом) консоли

7
Используя API https://api.tvmaze.com, реализовать следующие функции:

Поиск шоу по имени — например, запрос по имени шоу "Friends"

По полученным результатам вывести:
Название шоу (name)
Год запуска (premiered)
Жанры (genres)
Описание (коротко — первые 200 символов из summary, очистить HTML-теги)

Выбрать конкретное шоу из списка (например, первое) и получить его ID.
По ID получить список сезонов шоу
Вывести для каждого сезона
Номер сезона (number)
Даты начала и окончания сезона (premiereDate и endDate)

По ID получить список эпизодов
Вывести общее количество эпизодов и первые 5 эпизодов с их названиями и датами выхода.

tvmaze_api_practice.py

Оценивается при наличии скриншота работы и tvmaze_api_practice.txt с данными (выводом) консоли