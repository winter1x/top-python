# 1. Логические значения (bool)
# В Python существуют два булевых значения: True и False.
# Также, можно использовать числа и коллекции для приведения к логическому значению:
# 0 — ложь (False), любое ненулевое число — истина (True)
# Пустая строка ("") — ложь, все остальные строки — истина.
# Пустая коллекция (списки, множества, кортежи) — ложь, непустая коллекция — истина.
# None — специальное значение, которое часто используется для обозначения отсутствия значения.

# Пример:
a = True  # Истина
b = False  # Ложь
c = 0  # Ложь
d = "Hello"  # Истина

# 2. Условия (if, elif, else)
# Оператор if используется для проверки условий. Если условие истинно, выполняется первый блок кода.
# elif — это блок, который проверяется, если предыдущее условие было ложным. Можно не указывать
# else выполняется, если все предыдущие условия были ложными. Можно не указывать

# Что такое pass?
# Оператор pass — это пустая инструкция в Python, которая не выполняет никаких действий.
# Он используется в ситуациях, когда синтаксически требуется наличие блока кода, но выполнение действий не нужно.
# Pass позволяет избежать ошибки синтаксиса, когда блок кода должен быть, но ничего не должно быть выполнено.
# В случае использования pass программа не выполняет никаких операций, просто идет к следующему шагу.

if a:
    # Этот блок выполняется, если переменная a == True
    pass
elif b:
    # Этот блок выполняется, если переменная b == True и все предыдущие условия были ложными
    pass
else:
    # Этот блок выполняется, если все предыдущие условия ложные
    pass

# Пример с числом
number = 0
if number:
    print(f"{number} - это истина")
else:
    print(f"{number} - это ложь")

# Пример с ненулевым числом
number = 42
if number:
    print(f"{number} - это истина")
else:
    print(f"{number} - это ложь")

# Пример со строкой
text = ""
if text:
    print(f"'{text}' - это истина")
else:
    print(f"'{text}' - это ложь")

# Пример с непустой строкой
text = "Hello"
if text:
    print(f"'{text}' - это истина")
else:
    print(f"'{text}' - это ложь")

# Пример с коллекцией
lst = []
if lst:
    print(f"{lst} - это истина")
else:
    print(f"{lst} - это ложь")

# Пример с непустой коллекцией
lst = [1, 2, 3]
if lst:
    print(f"{lst} - это истина")
else:
    print(f"{lst} - это ложь")

# Пример с использованием if, elif, else
x = 10
if x < 0:
    print("x меньше нуля")
elif x == 0:
    print("x равен нулю")
else:
    print("x больше нуля")
# 1. Логические операторы:
# Логические операторы используются для выполнения логических операций. В Python есть три основные логические оператора:
# - and (логическое И) — возвращает True, если оба условия истинны. *
# - or (логическое ИЛИ) — возвращает True, если хотя бы одно условие истинно. +
# - not (логическое НЕ) — инвертирует логическое значение (True становится False, False становится True).

a = True # 1
b = False # 0

# Оператор and: оба условия должны быть True
if a and b:
    print("a и b оба True")
else:
    print("a и b не оба True")

# Оператор or: хотя бы одно условие должно быть True
if a or b:
    print("Хотя бы одно из условий True")
else:
    print("Оба условия False")

# Оператор not: инвертирует значение
if not b:
    print("not b - это True, потому что b было False")

# 2. Операторы сравнения:
# Операторы сравнения используются для сравнения значений. В Python есть несколько операторов сравнения:
# - == (равно) — проверяет, равны ли два значения.
# - != (не равно) — проверяет, не равны ли два значения.
# - < (меньше) — проверяет, меньше ли одно значение другого.
# - > (больше) — проверяет, больше ли одно значение другого.
# - <= (меньше или равно) — проверяет, меньше ли или равно ли одно значение другому.
# - >= (больше или равно) — проверяет, больше ли или равно ли одно значение другому.

x = 5
y = 10

# Проверка равенства
if x == y:
    print(f"{x} равно {y}")
else:
    print(f"{x} не равно {y}")

# Проверка неравенства
if x != y:
    print(f"{x} не равно {y}")
else:
    print(f"{x} равно {y}")

# Проверка меньше
if x < y:
    print(f"{x} меньше {y}")

# Проверка больше
if x > y:
    print(f"{x} больше {y}")

# Проверка меньше или равно
if x <= y:
    print(f"{x} меньше или равно {y}")

# Проверка больше или равно
if x >= y:
    print(f"{x} больше или равно {y}")
else:
    print(f"{x} не больше или равно {y}")

# 3. Примеры использования логических операторов в условиях:
a = 3
b = 5

# Проверка, если a больше 0 и b меньше 10
if a > 0 and b < 10:
    print("a больше 0 и b меньше 10")

# Проверка, если a меньше 0 или b больше 0
if a < 0 or b > 0:
    print("a меньше 0 или b больше 0")

# Применение not для инверсии условия
if not (a < 0):
    print("a не меньше 0 (то есть a больше или равно 0)")

# 4. Использование операторов сравнения в сложных выражениях:
# Операторы сравнения можно комбинировать с логическими операторами для создания более сложных условий.
# Например, проверим, что число больше 0, но меньше 10, с помощью and:
number = 7
if number > 0 and number < 10:
    print(f"{number} находится между 0 и 10")

# С помощью or можно проверять, если число либо меньше 0, либо больше 10:
if number < 0 or number > 10:
    print(f"{number} меньше 0 или больше 10")
else:
    print(f"{number} находится между 0 и 10")

# Синтаксис тернарного оператора:
# <значение_если_True> if <условие> else <значение_если_False>

x = 5
result = "Положительное число" if x > 0 else "Отрицательное или ноль"

print(result)

# 3. Цикл while
# Цикл while выполняется до тех пор, пока условие истинно.
# Если условие ложное, цикл завершится.

# Пример:
i = 0
while i < 5:  # Пока i меньше 5, цикл будет выполняться
    i += 1

# 4. Цикл while-else
# Блок else выполняется, если цикл завершился нормально, а не был прерван с помощью break.

while i < 5:
    i += 1
else:
    # Этот блок выполнится, если цикл не был прерван
    pass

# 5. Операторы break и continue в циклах
# Оператор break завершает выполнение цикла досрочно.
# Оператор continue пропускает текущую итерацию и переходит к следующей.

# Пример:
for i in range(10):
    if i == 5:
        break  # Прерывает цикл, если i == 5
    elif i == 3:
        continue  # Пропускает итерацию, если i == 3

# Пример с циклом while
i = 0
while i < 5:
    print(f"i = {i}")
    i += 1

# Пример с while-else
i = 0
while i < 5:
    print(f"i = {i}")
    i += 1
else:
    print("Цикл завершен, i больше или равно 5")

# Пример с break
for i in range(10):
    if i == 5:
        break
    print(i)

# Пример с continue
for i in range(5):
    if i == 3:
        continue  # пропускаем 3
    print(i)

# 6. Цикл for
# Цикл for используется для перебора элементов в последовательности (например, диапазоне, строках, списках и т. д.).
# В Python для перебора чисел удобно использовать функцию range(), которая генерирует последовательности чисел.

for i in range(3, 8):  # Перебор чисел с 3 по 7 (включительно)
    pass

# 7. Цикл for-else
# Подобно циклу while-else, блок else выполняется, если цикл завершился без использования break.

for i in range(3, 6):
    pass
else:
    # Этот блок выполнится, если цикл не был прерван
    pass

# Пример с циклом for
for i in range(3, 8):
    print(f"i = {i}")

# Пример с for-else
for i in range(3, 6):
    print(f"i = {i}")
else:
    print("Цикл завершен, прошли все значения")

# Логические операторы часто используются в циклах для более гибкой работы с условиями.
# Например, выводим числа от 1 до 10, которые одновременно больше 3 и меньше 8:
for i in range(1, 11):
    if i > 3 and i < 8:
        print(i)  # Выведет числа 4, 5, 6, 7

# Пример использования or в цикле:
# Выводим числа от 1 до 10, которые меньше 3 или больше 8:
for i in range(1, 11):
    if i < 3 or i > 8:
        print(i)  # Выведет числа 1, 2, 9, 10


# 8. Последовательности

# range() — функция для генерации последовательностей чисел.
# range(start, stop, step) генерирует числа от start до stop, с шагом step.
# Это позволяет создавать диапазоны для циклов for.

# Пример:
for i in range(1, 10, 2):  # Перебор чисел от 1 до 9 с шагом 2
    pass

# str — строка в Python. Строки можно перебирать по символам в цикле for.
# Пример:
my_string = "Python"
for char in my_string:
    pass

# list — список в Python. Списки можно перебирать с помощью цикла for.

my_list = [1, 2, 3, 4]
for num in my_list:
    pass

# Пример с range
for i in range(1, 10, 2):
    print(i)

# Пример с преобразованием в строку и перебором символов
my_str = "Hello"
for char in my_str:
    print(f"Character: {char}")

# Пример с list
my_list = [1, 2, 3, 4]
for num in my_list:
    print(f"List item: {num}")

# 1. Использование _ как переменной-заполнителя
# В цикле for, если нам не нужно использовать значение переменной, мы можем заменить её на _
# Это является хорошей практикой, чтобы показать, что мы игнорируем это значение.

# Пример 1: Перебор последовательности без использования переменной
# Мы перебираем числа от 1 до 5, но нам не нужно использовать сами числа.
for _ in range(5):
    print("Это просто повторяется 5 раз")

# Пример 2: В переборе списка нам нужно только количество элементов, но сами элементы не важны.
my_list = ['a', 'b', 'c', 'd']
for _ in my_list:
    print("Повторяем действие для каждого элемента, но элементы не важны")

# 9. Структура match-case (Сопоставление с образцом)
# В Python 3.10 был введен новый оператор сопоставления с образцом — match-case. Он позволяет делать более удобные и читаемые проверки на различные шаблоны значений.
# Основное преимущество использования match-case — это возможность проверки различных вариантов значений переменной.
# Он похож на конструкцию switch-case, но значительно мощнее.

# Основные компоненты:
# - `match` — используется для начала проверки.
# - `case` — определяет шаблон, с которым нужно сопоставить переменную.
# - `_` — универсальный шаблон, который всегда соответствует любому значению (аналог "default" в switch). Можно не указывать

# Пример использования match-case:
value = 42

match value:  # Начало сопоставления с образцом
    case 1:  # Если value == 1
        print("Один")
    case 42:  # Если value == 42
        print("Ответ на все вопросы")
    case _ :  # Если не совпало с предыдущими случаями
        print("Неизвестное значение")

value = 42

if value == 1:
    print("Один")
elif value == 42:
    print("Ответ на все вопросы")
else:
    print("Неизвестное значение")

value = 42

if value == 1:
    print("Один")
else:
    print("Неизвестное значение")

value = 42

match value:
    case 1:
        print("Один")
    case _:
        print("Неизвестное значение")
